generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// =============== Enums ===============
//
enum Status {
  ONGOING
  COMPLETED
  FAILED // (Need?)
}

enum MissionRepeatType {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum MissionType {
  HEALTH
  SELF_DEVELOPMENT
  PRODUCTIVITY
  MINDFULNESS
  RELATIONSHIP
}

//
// =============== Models ===============
//
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  userMissions      UserMission[]
  badges            UserBadge[]
}

model Mission {
  id           Int      @id @default(autoincrement())
  title        String
  type         MissionType @default(SELF_DEVELOPMENT)
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt 

  UserMission UserMission[]
}

model UserMission {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  missionId Int
  mission   Mission @relation(fields: [missionId], references: [id])

  status    Status    @default(ONGOING)
  startDate DateTime  @default(now())
  endDate   DateTime? 
  updatedAt DateTime  @updatedAt 

  // Mission repeat settings
  repeatType MissionRepeatType @default(DAILY)
  // Sunday(0) to Saturday(6)
  repeatDays Boolean[] @default([false, false, false, false, false, false, false])

  // Logs (tracking progress)
  logs UserMissionLog[]

  // Prevent duplicate selection of the same mission by the same user
  @@unique([userId, missionId])
}

//
// =============== Newly Added Log Table ===============
//
model UserMissionLog {
  id            Int         @id @default(autoincrement())
  userMission   UserMission @relation(fields: [userMissionId], references: [id])
  userMissionId Int

  date      DateTime // e.g., 2025-03-06 (UTC midnight)
  isDone    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Prevent duplicate entries for the same (userMission + date)
  @@unique([userMissionId, date])
}

//
// =============== Badge / UserBadge ===============
//
model Badge {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  condition   String 
  rank        Int      @default(3)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt 

  userBadges UserBadge[]
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  badge     Badge    @relation(fields: [badgeId], references: [id])
  badgeId   Int
  awardedAt DateTime @default(now())

  // Prevent earning the same badge more than once
  @@unique([userId, badgeId])
}